---
title: Game Face
author: David Czarnecki
---
“Game Face” will be our weekly round-up of our internal and external open source work here at Agora Games. Internal open source refers to our public projects that you can find over at our [Agora Games GitHub](https://github.com/agoragames/) account. External open source work refers to projects that we contribute to in off-hours and may or may not have anything to do with video games because we’re swell folks like that. Pretty simple right? Here goes…

 **haigha**

 [haigha](https://github.com/agoragames/haigha) is our simple to use client library for interacting with AMQP brokers. We released 0.5.9 this week with [support for array lists in headers](https://github.com/agoragames/haigha/pull/28).

 Contributor(s): Aaron Westendorf ([GitHub](https://github.com/awestendorf/), [Twitter](https://twitter.com/WashUffize)) and Joey Imbasciano ([GitHub](https://github.com/joeyimbasciano))

 **hipchat-api**

 [hipchat-api](https://github.com/czarneckid/hipchat-api) is a Ruby gem for interacting with the HipChat API. In the 1.0.5 release, support was added for the rooms_topic and users_undelete API methods.

 Contributor(s): David Czarnecki ([GitHub](https://github.com/czarneckid/), [Twitter](https://twitter.com/czarneckid))

 **leaderboard**

 [leaderboard](https://github.com/agoragames/leaderboard/) allows you to build leaderboards using Redis. We released version 3.0.0 this week which incorporates the following changes:

- Added rank_member_if and rank_member_if_in methods that allow you to rank a member in the leaderboard based on execution of a lambda.
- No longer cast scores to a floating point automatically. If requesting a score for an unknown member in the leaderboard, return `nil` . Under the old behavior, a `nil` score gets returned as 0.0. This is misleading as 0.0 is a valid score.

- Removes `:use_zero_index_for_rank_option` as valid option for requesting data from the leaderboard. [Original proposal](https://github.com/agoragames/leaderboard/pull/27)

- Optional member data is stored in a single hash. [Original proposal](https://github.com/agoragames/leaderboard/pull/26)

- Adds `:sort_by` as valid option for requesting data from the leaderboard. [Original proposal](https://github.com/agoragames/leaderboard/pull/30)

- Removes `:with_scores` and `:with_ranks` as valid options for requesting data from the leaderboard

 

 A version jump to 3.0.0 was required since the storage of optional member data for a leaderboard was backwards incompatible with the 2.x release.

 Contributor(s): David Czarnecki ([GitHub](https://github.com/czarneckid/), [Twitter](https://twitter.com/czarneckid))

 **leaderboard-python**

 [leaderboard-python](https://github.com/agoragames/leaderboard-python) is our leaderboard project, originally written in Ruby, ported to Python. We released version 2.2.0 this week, which has functional parity with the Ruby library. You would be able to use either library to interact with leaderboard data in Redis. Going forward, we will try as best we can to always maintain functional parity between the Ruby and Python implementations.

 Contributor(s): David Czarnecki ([GitHub](https://github.com/czarneckid/), [Twitter](https://twitter.com/czarneckid))

 **stache**

 [stache](https://github.com/agoragames/stache) is our Rails 3.x compatible Mustache/Handlebars Template Handler, with support for partials and a couple extra niceties to make sharing the raw templates with client-side javascript a little easier. We integrated a pull request to be able to [use template files without format in extension for mustache](https://github.com/agoragames/stache/pull/22).

 Contributor(s): Matthew Wilson ([GitHub](https://github.com/hypomodern/), [Twitter](https://twitter.com/hypomodern)) and Kate Gengler ([GitHub](https://github.com/kategengler))
